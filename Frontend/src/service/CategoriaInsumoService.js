import axios from "axios" // Importar axios para un manejo de errores consistente

/**
 * Helper function to parse Axios errors into a single string message
 */
const parseAxiosError = (error) => {
  let errorMessage = "Ocurri√≥ un error desconocido."

  if (error.response) {
    const errorData = error.response.data
    if (typeof errorData === "string") {
      errorMessage = errorData
    } else if (errorData && typeof errorData === "object") {
      // Priorizar campos de error espec√≠ficos del backend
      if (errorData.error) {
        errorMessage = errorData.error
      } else if (errorData.detail) {
        errorMessage = errorData.detail
      } else if (errorData.message) {
        errorMessage = errorData.message
      } else {
        // Agrupar errores de validaci√≥n por campo
        const fieldErrors = Object.entries(errorData)
          .map(([key, value]) => {
            if (Array.isArray(value)) {
              return `${key}: ${value.join(", ")}`
            }
            return `${key}: ${value}`
          })
          .join("; ")
        if (fieldErrors) {
          errorMessage = `Errores de validaci√≥n: ${fieldErrors}`
        } else {
          errorMessage = `Error del servidor (${error.response.status}): ${error.response.statusText}`
        }
      }
    }
  } else if (error.request) {
    errorMessage = "Error de conexi√≥n. Verifique su conexi√≥n a internet y que el servidor est√© funcionando."
  } else {
    errorMessage = `Error de configuraci√≥n: ${error.message}`
  }
  return errorMessage
}

/**
 * Servicio para gestionar las operaciones de API relacionadas con Categor√≠as de Insumos
 */
class CategoriaInsumoService {
  constructor() {
    // URL base de la API
    this.API_URL = "https://appweb-rxph.onrender.com/api/categoria-insumos/"
  }

  /**
   * Obtiene todas las categor√≠as de insumos
   * @returns {Promise} Promesa con los datos de las categor√≠as
   */
  async getCategorias() {
    try {
      const response = await axios.get(this.API_URL)
      return response.data
    } catch (error) {
      console.error("Error al obtener categor√≠as:", error)
      throw new Error(parseAxiosError(error))
    }
  }

  /**
   * Obtiene una categor√≠a de insumo por su ID
   * @param {number} id - ID de la categor√≠a
   * @returns {Promise} Promesa con los datos de la categor√≠a
   */
  async getCategoriaById(id) {
    try {
      const response = await axios.get(`${this.API_URL}${id}/`)
      return response.data
    } catch (error) {
      console.error(`Error al obtener categor√≠a con ID ${id}:`, error)
      throw new Error(parseAxiosError(error))
    }
  }

  /**
   * Crea una nueva categor√≠a de insumo
   * @param {Object} categoria - Datos de la categor√≠a a crear
   * @returns {Promise} Promesa con los datos de la categor√≠a creada
   */
  async createCategoria(categoria) {
    try {
      const response = await axios.post(this.API_URL, categoria)
      return response.data
    } catch (error) {
      console.error("Error al crear categor√≠a:", error)
      throw new Error(parseAxiosError(error))
    }
  }

  /**
   * Actualiza una categor√≠a de insumo existente
   * @param {number} id - ID de la categor√≠a a actualizar
   * @param {Object} categoria - Datos actualizados de la categor√≠a
   * @returns {Promise} Promesa con los datos de la categor√≠a actualizada
   */
  async updateCategoria(id, categoria) {
    try {
      const response = await axios.put(`${this.API_URL}${id}/`, categoria)
      return response.data
    } catch (error) {
      console.error(`Error al actualizar categor√≠a con ID ${id}:`, error)
      throw new Error(parseAxiosError(error))
    }
  }

  /**
   * Actualiza parcialmente una categor√≠a de insumo
   * @param {number} id - ID de la categor√≠a a actualizar
   * @param {Object} cambios - Campos a actualizar
   * @returns {Promise} Promesa con los datos de la categor√≠a actualizada
   */
  async patchCategoria(id, cambios) {
    try {
      const response = await axios.patch(`${this.API_URL}${id}/`, cambios)
      return response.data
    } catch (error) {
      console.error(`Error al actualizar parcialmente categor√≠a con ID ${id}:`, error)
      throw new Error(parseAxiosError(error))
    }
  }

  /**
   * Verifica si una categor√≠a de insumo puede ser eliminada (no tiene insumos asociados)
   * @param {number} categoriaId - ID de la categor√≠a
   * @returns {Promise<Object>} Promesa con el resultado de la verificaci√≥n
   */
  async checkCategoriaCanBeDeleted(categoriaId) {
    try {
      console.log(`üîç Verificando si la categor√≠a ${categoriaId} puede ser eliminada`)
      const response = await axios.get(`${this.API_URL}${categoriaId}/check_insumos/`)
      console.log("‚úÖ Respuesta de verificaci√≥n:", response.data)
      return response.data
    } catch (error) {
      console.error("Error al verificar categor√≠a:", error)
      // Re-lanzar el error parseado para que el llamador lo maneje
      throw new Error(parseAxiosError(error))
    }
  }

  /**
   * Elimina una categor√≠a de insumo
   * @param {number} id - ID de la categor√≠a a eliminar
   * @returns {Promise} Promesa que se resuelve cuando la categor√≠a es eliminada
   */
  async deleteCategoria(id) {
    try {
      console.log(`üóëÔ∏è Eliminando categor√≠a con ID: ${id}`)
      console.log(`üìç URL completa: ${this.API_URL}${id}/`)

      // Verificar que el ID sea v√°lido
      if (!id || id === "undefined" || id === "null" || id === undefined || id === null) {
        throw new Error("ID de categor√≠a inv√°lido o no proporcionado")
      }

      // Convertir ID a n√∫mero si es string
      const numericId = typeof id === "string" ? Number.parseInt(id, 10) : id
      if (isNaN(numericId)) {
        throw new Error("ID de categor√≠a debe ser un n√∫mero v√°lido")
      }

      // NUEVA VALIDACI√ìN: Verificar si la categor√≠a puede ser eliminada
      console.log(`üîç Verificando si la categor√≠a puede ser eliminada...`)
      try {
        const checkResult = await this.checkCategoriaCanBeDeleted(numericId)
        console.log(`üìä Resultado de verificaci√≥n:`, checkResult)

        if (!checkResult.puede_eliminar) {
          const info = checkResult.insumos_info
          const categoriaNombre = checkResult.categoria_nombre || "esta categor√≠a"
          // Lanzar un error con un mensaje espec√≠fico para el frontend
          throw new Error(
            `No se puede eliminar la categor√≠a '${categoriaNombre}' porque tiene ${info.total} insumo(s) asociado(s). ` +
              "Primero debe reasignar o eliminar los insumos que tienen esta categor√≠a.",
          )
        }
      } catch (checkError) {
        // Si es un error de validaci√≥n que ya contiene el mensaje personalizado, re-lanzarlo
        if (checkError.message.includes("No se puede eliminar")) {
          throw checkError
        }
        // Si es un error de conexi√≥n o cualquier otro error en la verificaci√≥n,
        // loguearlo y continuar con el intento de eliminaci√≥n, dejando que el backend
        // maneje la validaci√≥n final.
        console.log("‚ö†Ô∏è No se pudo verificar insumos asociados, el backend manejar√° la validaci√≥n final:", checkError)
      }

      console.log(`üîÑ Enviando petici√≥n DELETE a: ${this.API_URL}${numericId}/`)

      const response = await axios.delete(`${this.API_URL}${numericId}/`, {
        timeout: 10000, // 10 segundos de timeout
        headers: {
          "Content-Type": "application/json",
        },
      })

      console.log("‚úÖ Respuesta de eliminaci√≥n exitosa:", {
        status: response.status,
        statusText: response.statusText,
        data: response.data,
      })

      // Manejar diferentes tipos de respuesta exitosa
      let message = "Categor√≠a eliminada correctamente"
      if (response.data) {
        if (typeof response.data === "string") {
          message = response.data
        } else if (response.data.mensaje || response.data.message) {
          message = response.data.mensaje || response.data.message
        }
      }

      return {
        success: true,
        data: response.data,
        message: message,
        status: response.status,
      }
    } catch (error) {
      console.error("‚ùå Error completo al eliminar categor√≠a:", error)
      // Re-lanzar el error parseado para que el llamador lo maneje
      throw new Error(parseAxiosError(error))
    }
  }

  /**
   * Cambia el estado de una categor√≠a (activo/inactivo)
   * @param {number} id - ID de la categor√≠a
   * @param {string} nuevoEstado - Nuevo estado ('activo' o 'inactivo')
   * @returns {Promise} Promesa con los datos de la categor√≠a actualizada
   */
  async cambiarEstado(id, nuevoEstado) {
    try {
      // Usar PATCH para cambiar solo el estado
      const data = { estado: nuevoEstado }
      const response = await axios.patch(`${this.API_URL}${id}/cambiar_estado/`, data)
      return response.data
    } catch (error) {
      console.error(`Error al cambiar estado de categor√≠a con ID ${id}:`, error)
      throw new Error(parseAxiosError(error))
    }
  }
}

export default new CategoriaInsumoService()
